-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "collections" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "collections_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"name" text NOT NULL,
	"description" text,
	"is_default" boolean DEFAULT false,
	CONSTRAINT "collections_name_key" UNIQUE("name")
);
--> statement-breakpoint
ALTER TABLE "collections" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "word_groups" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "word_groups_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"words" text[] NOT NULL,
	"collection_id" bigint NOT NULL,
	"name" text,
	"description" text,
	"options" jsonb[] NOT NULL
);
--> statement-breakpoint
ALTER TABLE "word_groups" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_preference" (
	"user_id" uuid PRIMARY KEY DEFAULT auth.uid() NOT NULL,
	"preference" jsonb
);
--> statement-breakpoint
ALTER TABLE "user_preference" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_intervals" (
	"user_id" uuid DEFAULT auth.uid() NOT NULL,
	"progress" smallint NOT NULL,
	"interval_ms" bigint NOT NULL,
	CONSTRAINT "user_intervals_pkey" PRIMARY KEY("user_id","progress"),
	CONSTRAINT "user_intervals_progress_check" CHECK ((progress >= 0) AND (progress <= 100))
);
--> statement-breakpoint
ALTER TABLE "user_intervals" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_progress" (
	"word_group_id" bigint NOT NULL,
	"user_id" uuid DEFAULT auth.uid() NOT NULL,
	"progress" smallint NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "user_progress_pkey" PRIMARY KEY("word_group_id","user_id"),
	CONSTRAINT "user_progress_progress_check" CHECK ((progress >= 0) AND (progress <= 100))
);
--> statement-breakpoint
ALTER TABLE "user_progress" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "word_groups" ADD CONSTRAINT "public_word_groups_collection_id_fkey" FOREIGN KEY ("collection_id") REFERENCES "public"."collections"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "user_preference" ADD CONSTRAINT "user_preference_uid_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "user_progress" ADD CONSTRAINT "public_user_progress_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_progress" ADD CONSTRAINT "public_user_progress_word_group_id_fkey" FOREIGN KEY ("word_group_id") REFERENCES "public"."word_groups"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
CREATE POLICY "Enable read access for authenticated users" ON "collections" AS PERMISSIVE FOR SELECT TO public USING ((auth.uid() IS NOT NULL));--> statement-breakpoint
CREATE POLICY "Enable read access for authenticated users" ON "word_groups" AS PERMISSIVE FOR SELECT TO public USING ((auth.uid() IS NOT NULL));--> statement-breakpoint
CREATE POLICY "Enable insert for users based on user_id" ON "user_preference" AS PERMISSIVE FOR ALL TO public USING ((( SELECT auth.uid() AS uid) = user_id)) WITH CHECK ((( SELECT auth.uid() AS uid) = user_id));--> statement-breakpoint
CREATE POLICY "Users can only alter their own data" ON "user_intervals" AS PERMISSIVE FOR ALL TO public USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));--> statement-breakpoint
CREATE POLICY "Users can only alter their own data" ON "user_progress" AS PERMISSIVE FOR ALL TO public USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));
*/