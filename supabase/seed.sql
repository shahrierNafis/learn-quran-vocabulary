--
-- collections
--
create table public.collections (
id bigint generated by default as identity,
name text not null,
description text null,
is_default boolean null default false,
constraint collections_pkey primary key (id),
constraint collections_name_key unique (name)
) tablespace pg_default;
--
alter table "public"."collections" enable row level security;
--
create policy "Enable read access for authenticated users" on "public"."collections" for
select to public using (auth.uid() is not null);
--
-- word_groups
--
create table public.word_groups (
id bigint generated by default as identity,
words text [] not null,
collection_id bigint not null,
constraint word_groups_pkey primary key (id),
constraint public_word_groups_collection_id_fkey foreign key (collection_id) references collections (id) on update cascade on delete cascade
) tablespace pg_default;
--
alter table "public"."word_groups" enable row level security;
--
create policy "Enable read access for authenticated users" on "public"."word_groups" for
select to public using (auth.uid() is not null);
--
-- user_progress
--
create table public.user_progress (
word_group_id bigint not null,
user_id uuid not null default auth.uid (),
progress smallint not null CHECK (
    progress >= 0
    AND progress <= 100
),
updated_at timestamp with time zone not null default now(),
constraint user_progress_pkey primary key (word_group_id, user_id),
constraint public_user_progress_user_id_fkey foreign key (user_id) references auth.users (id),
constraint public_user_progress_word_group_id_fkey foreign key (word_group_id) references word_groups (id)
) tablespace pg_default;
--
alter table "public"."user_progress" enable row level security;
--
CREATE POLICY "Users can only alter their own data" ON "public"."user_progress" AS PERMISSIVE FOR ALL TO public USING (auth.uid() = "public"."user_progress"."user_id") WITH CHECK (auth.uid() = "public"."user_progress"."user_id");
--
-- user_intervals
--
create table public.user_intervals (
user_id uuid not null default auth.uid (),
progress smallint not null CHECK (
    progress >= 0
    AND progress <= 100
),
interval_ms bigint not null,
constraint user_intervals_pkey primary key (user_id, progress)
) tablespace pg_default;
--
alter table "public"."user_intervals" enable row level security;
CREATE POLICY "Users can only alter their own data" ON "public"."user_intervals" AS PERMISSIVE FOR ALL TO public USING (auth.uid() = "public"."user_intervals"."user_id") WITH CHECK (auth.uid() = "public"."user_intervals"."user_id");
--
--
--
--
create or replace function get_word_groups(collection_id int) returns setof public.word_groups language sql as $$
select public.word_groups.*
from public.word_groups
where public.word_groups.collection_id = $1
order by array_length(public.word_groups.words, 1) DESC $$;
--
create or replace function get_0_word_groups(collection_id int) returns setof public.word_groups language sql as $$
select public.word_groups.*
from public.word_groups
    Left JOIN public.user_progress on public.word_groups.id = public.user_progress.word_group_id
where public.word_groups.collection_id = $1
    AND (
        public.user_progress.progress Is null
        or public.user_progress.progress = 0
    )
order by array_length(public.word_groups.words, 1) DESC $$;